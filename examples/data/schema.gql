"Anything with an ID can be a node"
interface Node {
  "A unique identifier"
  id: String!
}

"This is a `DateTime` scalar"
scalar DateTime

"`Markdown` and reference interpolation like [`[String!]!`]({{Types.String}}) are supported"
type SimpleTypeOne implements Node {
  id: String!
  "`Markdown` and reference interpolation like [`[String!]!`]({{Types.String}}) are supported"
  myType: [MyType!]!
}

type SimpleTypeTwo {
  simpleTypeTwoField: String
}

"A Union of `SimpleTypeOne` and `SimpleTypeTwo`. `Markdown` and reference interpolation like [`[String!]!`]({{Types.String}}) are supported"
union SimpleTypes =
  SimpleTypeOne
  | SimpleTypeTwo


"`Markdown` and reference interpolation like [`[String!]!`]({{Types.String}}) are supported"
type MyType {
  "`Markdown` and reference interpolation like [`[String!]!`]({{Types.String}}) are supported"
  nonRequiredField(
    "`Markdown` and reference interpolation like [`[String!]!`]({{Types.String}}) are supported"
    nonRequiredArg: String = "some default string"
    reqArg: String!
    reqArrayArg: [String]!
    dblReqArrayArg: [String!]!
  ): String

  requiredField: String! @deprecated(reason: "`requiredField` is going away")

  episode: EpisodeEnum!

  requiredArrayField: [String]!

  doubleRequiredArrayField: [String!]!
}

type SecretType {
  "This is a type that should probably be undocumented"
  secret: String!
}

type Query {
  "`Markdown` and reference interpolation like [`[String!]!`]({{Types.String}}) are supported"
  myQuery(
    "`Markdown` and reference interpolation like [`[String!]!`]({{Types.String}}) are supported"
    nonReqQueryArg: String = "some default string"
    reqQueryArg: String
    reqQueryArrayArg: [String]!
    dblReqQueryArrayArg: [String!]!
  ): String @deprecated(reason: "`myQuery` is going away")

  "This Query has the same name as a Mutation"
  stringThing: String

  getInts: [Int]

  "I'm the optionals query"
  optionalsQuery(
    optionalArg: [String]
  ): [String]

  requiredsQuery(
    dblReqArg: [String!]!
  ): [String!]!

  myTypes: [MyType]

  enumsQuery(
    enums: [EpisodeEnum!]! = [EMPIRE, JEDI]
  ): String

  nodeQuery(
    id: String!
  ): Node
}

type Mutation {
  "This Mutation has the same name as a Query"
  stringThing(anArgument: String): String

  "`Markdown` and reference interpolation like [`[String!]!`]({{Types.String}}) are supported"
  myMutation(
    "`Markdown` and reference interpolation like [`[String!]!`]({{Types.String}}) are supported"
    nonReqMutationArg: String = "some default string"
    reqMutationArg: String!
    reqMutationArrayArg: [String]!
    dblReqMutationArrayArg: [String!]!
  ): String
}

"These are very important `enum`s. `Markdown` and reference interpolation like [`[String!]!`]({{Types.String}}) are supported"
enum EpisodeEnum {
  "Who is Luke? `Markdown` and reference interpolation like [`[String!]!`]({{Types.String}}) are supported"
  NEWHOPE @deprecated(reason: "`NEWHOPE` is going away")
  "Who is Darth?"
  EMPIRE
  "Who are the Ewoks?"
  JEDI
}

"An Input Type for filtering things. `Markdown` and reference interpolation like [`[String!]!`]({{Types.String}}) are supported"
input FilterType {
  "Comment for someField. `Markdown` and reference interpolation like [`[String!]!`]({{Types.String}}) are supported"
  someField: Boolean = false
  "Comment for anotherField"
  anotherField: String
  "Comment for episodeEnums"
  episodeEnums: [EpisodeEnum!]
}
